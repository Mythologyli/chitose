name: Go

on:
  - push
  - pull_request

jobs:

  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:

    - uses: actions/checkout@v4
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ^1.22
      id: go

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
        sudo apt-get update && sudo apt-get upgrade -y
        sudo apt-get install -y libpcap-dev
        # arm64
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal main universe" | sudo tee /etc/apt/sources.list.d/arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-security main universe" | sudo tee -a /etc/apt/sources.list.d/arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal-updates main universe" | sudo tee -a /etc/apt/sources.list.d/arm64.list
        sudo dpkg --add-architecture arm64
        sudo sed -i 's/deb /deb [arch=amd64] /g' /etc/apt/sources.list
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu libpcap-dev:arm64
    - name: Test
      run: |
        go test -race ./... && go vet ./...

    - name: Build
      run: |
        go build -o chitose-amd64 -v .
        CGO_ENABLED=1 GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc go build -o chitose-arm64 -v .

    - name: Deploy - Create Release
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        draft: false
        files: |
          chitose-amd64
          chitose-arm64
        prerelease: false
